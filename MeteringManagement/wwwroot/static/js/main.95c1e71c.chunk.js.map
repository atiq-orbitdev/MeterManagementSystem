{"version":3,"sources":["logo.svg","Grid.jsx","Upload.jsx","App.js","reportWebVitals.js","index.js"],"names":["columns","field","headerName","width","ResultGrid","props","style","height","rows","x","console","log","map","y","i","id","pageSize","Input","styled","display","Uploads","useState","success","setSuccess","failures","setFailed","resultList","setResultList","Stack","direction","alignItems","spacing","htmlFor","accept","type","onChange","data","FormData","append","target","files","axios","post","then","resp","alert","successes","document","getElementById","value","catch","err","Button","variant","component","fontStyle","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oNAAe,I,mFCQTA,EAAU,CACZ,CAAEC,MAAO,YAAaC,WAAY,aAAcC,MAAO,KACvD,CAAEF,MAAO,iBAAkBC,WAAY,mBAAoBC,MAAO,KAClE,CAAEF,MAAO,uBAAwBC,WAAY,0BAA2BC,MAAO,KAC/E,CAAEF,MAAO,SAAUC,WAAY,SAAUC,MAAO,MAarC,SAASC,EAAWC,GAC/B,OAAO,qBAAKC,MAAO,CAAEC,OAAQ,OAAQJ,MAAO,OAArC,SACH,cAAC,IAAD,CAAUK,MAZDC,EAYeJ,EAAMG,KAXlCE,QAAQC,IAAI,wDAA+CF,GACpDA,EAAEG,KAAI,SAACC,EAAGC,GACb,OAAO,2BACAD,GADP,IAEIE,GAAID,QAO6Bd,QAASA,EAASgB,SAAU,OAZzD,IAACP,ECPjB,IAAMQ,EAAQC,YAAO,QAAPA,CAAgB,CAC1BC,QAAS,SAGE,SAASC,IAAW,IAAD,EACAC,mBAAS,GADT,mBACvBC,EADuB,KACdC,EADc,OAEAF,mBAAS,GAFT,mBAEvBG,EAFuB,KAEbC,EAFa,OAGMJ,mBAAS,IAHf,mBAGvBK,EAHuB,KAGXC,EAHW,KAK9B,OACI,sBAAKZ,GAAG,cAAR,UACI,sEACA,cAACa,EAAA,EAAD,CAAOC,UAAU,MAAMC,WAAW,SAASC,QAAS,EAApD,SACI,wBAAOC,QAAQ,wBAAf,UACI,cAACf,EAAD,CAAOgB,OAAO,WAAWlB,GAAG,wBAAwBmB,KAAK,OAAOC,SAAU,SAAA1B,GACtE,IAAI2B,EAAO,IAAIC,SACfD,EAAKE,OAAO,OAAQ7B,EAAE8B,OAAOC,MAAM,IACnC9B,QAAQC,IAAI,uEAA8DF,EAAE8B,OAAOC,OACnFb,EAAc,IACdc,IAAMC,KAAK,yBAA0BN,GAAMO,MAAK,SAAAC,GAC5CC,MAAM,yBAD8C,IAE9CT,EAASQ,EAATR,KACNb,EAAWa,EAAKU,WAChBrB,EAAUW,EAAKZ,UACfG,EAAcS,EAAK5B,MACnBE,QAAQC,IAAI,qEAA4DyB,EAAK5B,MAC7EuC,SAASC,eAAe,yBAAyBC,MAAQ,MAC1DC,OAAM,SAAAC,GACLN,MAAM,2CAGd,cAACO,EAAA,EAAD,CAAQC,QAAQ,YAAYC,UAAU,OAAtC,yBAKR,2CACA,eAAC1B,EAAA,EAAD,CAAOC,UAAW,MAAOC,WAAY,SAAUC,QAAS,EAAxD,UACI,sBAAKzB,MAAO,CACRiD,UAAW,QADf,kCAEyBjC,KACzB,sBAAKhB,MAAO,CACRiD,UAAW,QADf,8BAEqB/B,QAEzB,8BACI,cAACpB,EAAD,CAAYkB,QAASA,EAASE,SAAUA,EAAUhB,KAAMkB,SCXzD8B,MAvCf,WACE,OAkBE,cAjBA,CAiBA,OAAKC,UAAU,MAAf,UACA,wBAAQA,UAAU,eAcfrC,QC1BQsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,SAM1BU,M","file":"static/js/main.95c1e71c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { DataGrid } from '@mui/x-data-grid';\r\n\r\n// const rows: GridRowsProp = [\r\n// { id: 1, col1: 'Hello', col2: 'World' },\r\n// { id: 2, col1: 'DataGridPro', col2: 'is Awesome' },\r\n// { id: 3, col1: 'MUI', col2: 'is Amazing' },\r\n// ];\r\n\r\nconst columns = [\r\n    { field: 'accountId', headerName: 'Account Id', width: 150 },\r\n    { field: 'meterReadValue', headerName: 'Meter Read Value', width: 200 },\r\n    { field: 'meterReadingDateTime', headerName: 'Meter Reading Date-Time', width: 200 },\r\n    { field: 'result', headerName: 'Result', width: 100 },\r\n];\r\n\r\nconst rowFunc = (x) => {\r\n    console.log(\"ðŸš€ ~ file: Grid.jsx ~ line 17 ~ rowFunc ~ x\", x)\r\n    return x.map((y, i) => {\r\n        return {\r\n            ...y,\r\n            id: i\r\n        }\r\n    })\r\n}\r\n\r\nexport default function ResultGrid(props) {\r\n    return <div style={{ height: '70vh', width: '90%' }}>\r\n        <DataGrid rows={rowFunc(props.rows)} columns={columns} pageSize={10} />\r\n    </div>\r\n}","import * as React from 'react';\r\nimport { styled } from '@material-ui/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Stack from '@material-ui/core/Stack';\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ResultGrid from './Grid';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\n\r\nexport default function Uploads() {\r\n    const [success, setSuccess] = useState(0)\r\n    const [failures, setFailed] = useState(0)\r\n    const [resultList, setResultList] = useState([])\r\n\r\n    return (\r\n        <div id=\"result-grid\">\r\n            <span>Please Select a CSV file to upload</span>\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                <label htmlFor=\"contained-button-file\">               \r\n                    <Input accept=\"text/csv\" id=\"contained-button-file\" type=\"file\" onChange={x => {\r\n                        let data = new FormData()\r\n                        data.append(\"file\", x.target.files[0])\r\n                        console.log(\"ðŸš€ ~ file: Upload.jsx ~ line 20 ~ Uploads ~ x.target.files\", x.target.files)\r\n                        setResultList([])\r\n                        axios.post(\"/meter-reading-uploads\", data).then(resp => {\r\n                            alert(\"successfully uploaded\")\r\n                            let { data } = resp\r\n                            setSuccess(data.successes)\r\n                            setFailed(data.failures)\r\n                            setResultList(data.rows)\r\n                            console.log(\"ðŸš€ ~ file: Upload.jsx ~ line 32 ~ axios.post ~ data.rows\", data.rows)\r\n                            document.getElementById(\"contained-button-file\").value = \"\";\r\n                        }).catch(err => {\r\n                            alert(\"Could not upload and process file\")\r\n                        })\r\n                    }} />\r\n                    <Button variant=\"contained\" component=\"span\">\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n            </Stack>\r\n            <span>Results</span>\r\n            <Stack direction={\"row\"} alignItems={\"center\"} spacing={2}>\r\n                <div style={{\r\n                    fontStyle: \"bold\"\r\n                }}>Successful Readings: {success}</div>\r\n                <div style={{\r\n                    fontStyle: \"bold\"\r\n                }}>Failed Readings: {failures}</div>\r\n            </Stack>\r\n            <div>\r\n                <ResultGrid success={success} failures={failures} rows={resultList} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\n//import Uploads from './Weather.js';\nimport Uploads from './Upload';\nfunction App() {\n  return (\n    /*<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Uploads/>\n    </div>*/\n    <div className=\"App\">\n    <header className=\"App-header\">\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n      {/* <p>\n        Edit <code>src/App.js</code> and save to reload.\n      </p> */}\n      {/* <a\n        className=\"App-link\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      </a> */}\n    </header>\n      {Uploads()}\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}